package com.example.u_bake.utils.json;

import com.example.u_bake.data.Ingredient;
import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;

import java.io.IOException;

/*
 * Class autogenerated by AutoValue extension, and fixes applied to generated code.
 * Used with Moshi to help parse JSON.
 */

public final class IngredientJsonAdapter extends JsonAdapter<Ingredient> {
    private static final String[] NAMES = new String[] {"ingredient","quantity","measure"};

    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);

    private final JsonAdapter<String> ingredientAdapter;

    private final JsonAdapter<Float> quantityAdapter;

    private final JsonAdapter<String> measureAdapter;

    public IngredientJsonAdapter(Moshi moshi) {
        this.ingredientAdapter = moshi.adapter(String.class).nonNull();
        this.quantityAdapter = moshi.adapter(float.class).nonNull();
        this.measureAdapter = moshi.adapter(String.class).nonNull();
    }

    @Override
    public Ingredient fromJson(JsonReader reader) throws IOException {
        reader.beginObject();
        String ingredient = null;
        Float quantity = 0f;
        String measure = null;
        while (reader.hasNext()) {
            switch (reader.selectName(OPTIONS)) {
                case 0: {
                    ingredient = this.ingredientAdapter.fromJson(reader);
                    break;
                }
                case 1: {
                    quantity = this.quantityAdapter.fromJson(reader);
                    break;
                }
                case 2: {
                    measure = this.measureAdapter.fromJson(reader);
                    break;
                }
                case -1: {
                    // Unknown name, skip it
                    reader.skipName();
                    reader.skipValue();
                }
            }
        }
        reader.endObject();
        return Ingredient.create(ingredient, quantity, measure);
    }

    @Override
    public void toJson(JsonWriter writer, Ingredient value) throws IOException {
        writer.beginObject();
        writer.name("ingredient");
        this.ingredientAdapter.toJson(writer, value.ingredient());
        writer.name("quantity");
        this.quantityAdapter.toJson(writer, value.quantity());
        writer.name("measure");
        this.measureAdapter.toJson(writer, value.measure());
        writer.endObject();
    }

    @Override
    public String toString() {
        return "JsonAdapter(" + "Ingredient" + ")";
    }
}
