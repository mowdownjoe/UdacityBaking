package com.example.u_bake.data;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;
import java.io.IOException;

/*
 * Class autogenerated by AutoValue extension, and fixes applied to generated code.
 * Used with Moshi to help parse JSON.
 */

public final class InstructionJsonAdapter extends JsonAdapter<Instruction> {
  private static final String[] NAMES = new String[] {"id","shortDescription","description","videoURL","thumbnailURL"};

  private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);

  private final JsonAdapter<Integer> idAdapter;

  private final JsonAdapter<String> shortDescriptionAdapter;

  private final JsonAdapter<String> descriptionAdapter;

  private final JsonAdapter<String> videoURLAdapter;

  private final JsonAdapter<String> thumbnailURLAdapter;

  public InstructionJsonAdapter(Moshi moshi) {
    this.idAdapter = moshi.adapter(int.class).nonNull();
    this.shortDescriptionAdapter = moshi.adapter(String.class).nonNull();
    this.descriptionAdapter = moshi.adapter(String.class).nonNull();
    this.videoURLAdapter = moshi.adapter(String.class).nonNull();
    this.thumbnailURLAdapter = moshi.adapter(String.class).nonNull();
  }

  @Override
  public Instruction fromJson(JsonReader reader) throws IOException {
    reader.beginObject();
    int id = 0;
    String shortDescription = null;
    String description = null;
    String videoURL = null;
    String thumbnailURL = null;
    while (reader.hasNext()) {
      switch (reader.selectName(OPTIONS)) {
        case 0: {
          id = this.idAdapter.fromJson(reader);
          break;
        }
        case 1: {
          shortDescription = this.shortDescriptionAdapter.fromJson(reader);
          break;
        }
        case 2: {
          description = this.descriptionAdapter.fromJson(reader);
          break;
        }
        case 3: {
          videoURL = this.videoURLAdapter.fromJson(reader);
          break;
        }
        case 4: {
          thumbnailURL = this.thumbnailURLAdapter.fromJson(reader);
          break;
        }
        case -1: {
          // Unknown name, skip it
          reader.skipName();
          reader.skipValue();
        }
      }
    }
    reader.endObject();
    return new AutoValue_Instruction(id, shortDescription, description, videoURL, thumbnailURL);
  }

  @Override
  public void toJson(JsonWriter writer, Instruction value) throws IOException {
    writer.beginObject();
    writer.name("id");
    this.idAdapter.toJson(writer, value.id());
    writer.name("shortDescription");
    this.shortDescriptionAdapter.toJson(writer, value.shortDescription());
    writer.name("description");
    this.descriptionAdapter.toJson(writer, value.description());
    writer.name("videoURL");
    this.videoURLAdapter.toJson(writer, value.videoURL());
    writer.name("thumbnailURL");
    this.thumbnailURLAdapter.toJson(writer, value.thumbnailURL());
    writer.endObject();
  }

  @Override
  public String toString() {
    return new StringBuilder().append("JsonAdapter(").append("Instruction").append(")").toString();
  }
}
